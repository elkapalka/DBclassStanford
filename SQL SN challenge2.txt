These problems are more challenging than those in the core set. Try them out to test your skills (and perhaps earn a Statement of Accomplishment with Distinction). 

Students at your hometown high school have decided to organize their social network using databases. So far, they have collected information about sixteen students in four grades, 9-12. Here's the schema: 

Highschooler ( ID, name, grade ) 
English: There is a high school student with unique ID and a given first name in a certain grade. 

Friend ( ID1, ID2 ) 
English: The student with ID1 is friends with the student with ID2. Friendship is mutual, so if (123, 456) is in the Friend table, so is (456, 123). 

Likes ( ID1, ID2 ) 
English: The student with ID1 likes the student with ID2. Liking someone is not necessarily mutual, so if (123, 456) is in the Likes table, there is no guarantee that (456, 123) is also present. 

Your queries will run over a small data set conforming to the schema. View the database. (You can also download the schema and data.) 

Question 2

For each student A who likes a student B where the two are not friends, find if they have a friend C in common (who can introduce them!). For all such trios, return the name and grade of A, B, and C.

select h1.name, h1.grade, h2.name, h2.grade, h3.name, h3.grade
from Highschooler h1, Highschooler h2, Highschooler h3, likes L
where h1.ID = L.ID1 AND h2.ID = L.ID2
and L.id1 not in (Select id1 from Friend where Friend.id1=h1.id and id2=h2.id OR (ID1=h2.ID and ID2=h1.ID) ) 
and h3.id in (select f1.id2 from Friend f1,Friend f2
 where ((f1.id1=h1.id AND f1.id2 = h3.id)   or (f1.id1=h3.id and f1.id2 = h1.id ))
and ((f2.id1=h2.id and f2.id2 = h3.id )  or (f2.id1=h3.id and f2.id2 = h2.id)))